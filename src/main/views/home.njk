{% from "govuk/components/summary-list/macro.njk" import govukSummaryList %}
{% from "govuk/components/button/macro.njk" import govukButton %}

{% extends "template.njk" %}

{% block content %}
  <h1 class="govuk-heading-xl">Tasks</h1>

  <style>
    #myForm {
      max-height: 0;
      overflow: hidden;
      transition: max-height 0.5s ease-out;
    }

    #myForm.show {
      max-height: 600px;
    }
  </style>

  <button type="button" class="govuk-button" data-module="govuk-button" name="create_task" id="create_task">
    Add new task
  </button>
  <fieldset class="govuk-fieldset" id="myForm">
    <legend class="govuk-fieldset__legend govuk-fieldset__legend--l">
    </legend>
    <div class="govuk-form-group">
      <label class="govuk-label" for="task-id">
        Task ID
      </label>
      <input class="govuk-input" id="task-id" name="taskid" type="number">
    </div>
    <div class="govuk-form-group">
      <label class="govuk-label" for="case-number">
        Task Case Number
      </label>
      <input class="govuk-input" id="case-number" name="casenumber" type="number">
    </div>
    <div class="govuk-form-group">
      <label class="govuk-label" for="title">
        Title
      </label>
      <input class="govuk-input" id="title" name="Title" type="text">
    </div>
    <div class="govuk-form-group">
      <label class="govuk-label" for="description">
        Description
      </label>
      <input class="govuk-input" id="description" name="Description" type="text">
    </div>
    <div class="govuk-form-group">
      <label class="govuk-label" for="description">
        Status
      </label>
      <input class="govuk-input" id="task-status" name="task-status" type="text">
    </div>
    <button type="button" class="govuk-button" data-module="govuk-button" name="create_task" id="create_task-confirm">
      Confirm
    </button>
  </fieldset>

  <script>
    const show_form_button = document.getElementById("create_task");
    const form = document.getElementById("myForm");
    const submit_form = document.getElementById("create_task-confirm");

    show_form_button.addEventListener("click", function() {
      form.classList.toggle("show");
      });

    submit_form.addEventListener("click", function() {
      const task_id = document.getElementById("task-id").value;
      const casenum = document.getElementById("case-number").value;
      const title = document.getElementById("title").value;
      const desc = document.getElementById("description").value;
      const status = document.getElementById("task-status").value;

      var today = new Date();
      var dd = String(today.getDate()).padStart(2, '0');
      var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!
      var yyyy = today.getFullYear();

      today = dd + '/' + mm + '/' + yyyy;

      // Simple validation
      if (!task_id) {
        alert("Please enter a task_id.");
        return;
      }

      console.log("Creating task:", { task_id, casenum, title, desc, status, today });

      fetch("http://127.0.0.1:5000/create-task", {
        method: "POST",
        headers: {
          "Content-Type": "application/json"
        },
        body: JSON.stringify(
          {
            id: task_id,
            CaseNumber: casenum,
            title: title,
            description: desc,
            status:status,
            CreatedDate:today
          }
        )
      })
        .then(response => response.json())
        .then(data => {
          console.log("Success:", data);
          form.classList.remove("show"); // Hide the form after submission
          window.location.reload();
        })
        .catch((error) => {
          console.error("Error:", error);
        });
    });
  </script>

  <div id="task-list">

    {%  for task in example %}
      {% if task.id %}

        {{ govukSummaryList({
          rows: [
            {
              key: {
              text: "ID"
            },
              value: {
              text: task.id
            },
              actions: {
              items: [
                {
                  href: "#",
                  text: "Delete",
                  visuallyHiddenText: "Delete description",
                  attributes: {
                  "data-task-id": task.id,
                  class: "delete-task-button"
                }
                },
                {
                  href: "#",
                  text: "Change",
                  visuallyHiddenText: "change case id ?!"
                }
              ]
            }
            },
            {
              key: {
              text: "Case Number"
            },
              value: {
              text: task.caseNumber
            },
              actions: {
              items: [
                {
                  href: "#",
                  text: "Change",
                  visuallyHiddenText: "change case number"
                }
              ]
            }
            },
            {
              key: {
              text: "Title"
            },
              value: {
              html: task.title
            },
              actions: {
              items: [
                {
                  href: "#",
                  text: "Change",
                  visuallyHiddenText: "change case title"
                }
              ]
            }
            },
            {
              key: {
              text: "Description"
            },
              value: {
              html: task.description
            },
              actions: {
              items: [
                {
                  href: "#",
                  text: "Delete",
                  visuallyHiddenText: "Delete description"
                },
                {
                  href: "#",
                  text: "Change",
                  visuallyHiddenText: "Change description"
                }
              ]
            }
            },
            {
              key: {
              text: "Status"
            },
              value: {
              html: task.status
            },
              actions: {
              items: [
              ]
            }
            },
            {
              key: {
              text: "Created Date"
            },
              value: {
              html: task.createdDate
            },
              actions: {
              items: [
              ]
            }
            }
          ]
        }) }}

      {% else %}
        Did not get task id
      {% endif %}

    {% endfor %}

  </div>

  <script>
    // Ensure script runs both on document load and after any dynamic content updates
    function initializeDeleteButtons() {
      const deleteButtons = document.querySelectorAll('.delete-task-button');

      deleteButtons.forEach(button => {
        // Remove previous event listeners to prevent duplicates
        const newButton = button.cloneNode(true);
        button.parentNode.replaceChild(newButton, button);

        newButton.addEventListener('click', async function(event) {
          event.preventDefault();
          const taskId = this.getAttribute('data-task-id');

          if (!taskId) {
            console.error('No task ID found');
            return;
          }

          // Confirm deletion
          if (confirm('Are you sure you want to delete this task?')) {
            try {
              const response = await fetch(`http://127.0.0.1:5000/delete-task/${taskId}`, {
                method: 'DELETE',
                headers: {
                  'Content-Type': 'application/json'
                }
              });

              if (response.ok) {
                console.log('Task deleted successfully');
                window.location.reload();
              } else {
                console.error('Failed to delete task:', response.statusText);
                alert('Failed to delete task. Please try again.');
              }
            } catch (error) {
              console.error('Error deleting task:', error);
              alert('Error deleting task. Please check your connection.');
            }
          }
        });
      });
    }

    // Run on initial page load
    document.addEventListener('DOMContentLoaded', initializeDeleteButtons);

    // If you're using any framework that might render content dynamically,
    // call initializeDeleteButtons() after content updates

  </script>
{% endblock %}

